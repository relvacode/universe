// Code generated by go-enum
// DO NOT EDIT!

package draw

import (
	"fmt"
)

const (
	// StrokeStyle is a attribute of type StrokeStyle
	StrokeStyle attribute = iota
	// FillStyle is a attribute of type FillStyle
	FillStyle
	// LineWidth is a attribute of type LineWidth
	LineWidth
	// Font is a attribute of type Font
	Font
	// TextBaseline is a attribute of type TextBaseline
	TextBaseline
	// GlobalAlpha is a attribute of type GlobalAlpha
	GlobalAlpha
	// StyleEnumSize is a attribute of type StyleEnumSize
	StyleEnumSize
)

const _attributeName = "strokeStylefillStylelineWidthfonttextBaselineglobalAlphastyleEnumSize"

var _attributeMap = map[attribute]string{
	0: _attributeName[0:11],
	1: _attributeName[11:20],
	2: _attributeName[20:29],
	3: _attributeName[29:33],
	4: _attributeName[33:45],
	5: _attributeName[45:56],
	6: _attributeName[56:69],
}

// String implements the Stringer interface.
func (x attribute) String() string {
	if str, ok := _attributeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("attribute(%d)", x)
}

var _attributeValue = map[string]attribute{
	_attributeName[0:11]:  0,
	_attributeName[11:20]: 1,
	_attributeName[20:29]: 2,
	_attributeName[29:33]: 3,
	_attributeName[33:45]: 4,
	_attributeName[45:56]: 5,
	_attributeName[56:69]: 6,
}

// Parseattribute attempts to convert a string to a attribute
func Parseattribute(name string) (attribute, error) {
	if x, ok := _attributeValue[name]; ok {
		return x, nil
	}
	return attribute(0), fmt.Errorf("%s is not a valid attribute", name)
}
